-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inverse_divisor is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of inverse_divisor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inverse_divisor,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.567000,HLS_SYN_LAT=44,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=11,HLS_SYN_FF=4425,HLS_SYN_LUT=5572,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv64_40F0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal c0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c4 : STD_LOGIC_VECTOR (7 downto 0);
    signal c5 : STD_LOGIC_VECTOR (7 downto 0);
    signal c6 : STD_LOGIC_VECTOR (7 downto 0);
    signal c7 : STD_LOGIC_VECTOR (7 downto 0);
    signal c8 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table2_ce0 : STD_LOGIC;
    signal one_half_table2_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_295_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_reg_551 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inverse_reg_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal t_V_1_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_1_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln849_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_1_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_reg_604 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_V_3_fu_446_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_3_reg_610 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln498_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln5_fu_189_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln6_fu_193_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_fu_225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln7_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_fu_201_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_1_fu_235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_1_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_fu_231_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_2_fu_245_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln9_fu_205_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln10_fu_209_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_3_fu_255_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln12_fu_217_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_fu_221_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_4_fu_265_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_4_fu_271_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln11_fu_213_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_5_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_5_fu_281_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln15_3_fu_261_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln15_6_fu_285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln15_6_fu_291_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln15_2_fu_251_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_fu_308_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_330_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln209_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_370_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1309_fu_374_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_fu_386_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_380_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_11_fu_353_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_12_fu_396_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_fu_404_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln849_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln849_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_1_fu_425_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_8_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal mantissa_V_fu_450_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_fu_463_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_466_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_480_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_485_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_489_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_505_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_459_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_501_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_509_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_5_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_515_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_533_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);

    component inverse_divisor_ddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component inverse_divisor_deOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component inverse_divisor_ufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component inverse_divisor_mbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component inverse_divisor_ocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component inverse_divisor_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        c0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c8 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mask_table1_U : component inverse_divisor_mbkb
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    one_half_table2_U : component inverse_divisor_ocud
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => one_half_table2_address0,
        ce0 => one_half_table2_ce0,
        q0 => one_half_table2_q0);

    inverse_divisor_CTRL_BUS_s_axi_U : component inverse_divisor_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        c0 => c0,
        c1 => c1,
        c2 => c2,
        c3 => c3,
        c4 => c4,
        c5 => c5,
        c6 => c6,
        c7 => c7,
        c8 => c8);

    inverse_divisor_ddEe_U1 : component inverse_divisor_ddEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => inverse_reg_566,
        din1 => ap_const_lv64_40F0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    inverse_divisor_deOg_U2 : component inverse_divisor_deOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_reg_561,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    inverse_divisor_ufYi_U3 : component inverse_divisor_ufYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_186_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                icmp_ln849_1_reg_589 <= icmp_ln849_1_fu_324_p2;
                icmp_ln849_reg_583 <= icmp_ln849_fu_318_p2;
                t_V_1_reg_577 <= t_V_1_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                inverse_reg_566 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sum_reg_551 <= sum_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_V_2_reg_604 <= p_Val2_8_fu_432_p1(62 downto 52);
                tmp_V_3_reg_610 <= tmp_V_3_fu_446_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_561 <= grp_fu_186_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                x_assign_reg_571 <= grp_fu_176_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_1_fu_235_p2 <= std_logic_vector(unsigned(zext_ln7_fu_197_p1) + unsigned(zext_ln8_fu_201_p1));
    add_ln15_2_fu_245_p2 <= std_logic_vector(unsigned(zext_ln15_1_fu_241_p1) + unsigned(zext_ln15_fu_231_p1));
    add_ln15_3_fu_255_p2 <= std_logic_vector(unsigned(zext_ln9_fu_205_p1) + unsigned(zext_ln10_fu_209_p1));
    add_ln15_4_fu_265_p2 <= std_logic_vector(unsigned(zext_ln12_fu_217_p1) + unsigned(zext_ln13_fu_221_p1));
    add_ln15_5_fu_275_p2 <= std_logic_vector(unsigned(zext_ln15_4_fu_271_p1) + unsigned(zext_ln11_fu_213_p1));
    add_ln15_6_fu_285_p2 <= std_logic_vector(unsigned(zext_ln15_5_fu_281_p1) + unsigned(zext_ln15_3_fu_261_p1));
    add_ln15_fu_225_p2 <= std_logic_vector(unsigned(zext_ln5_fu_189_p1) + unsigned(zext_ln6_fu_193_p1));
    add_ln502_fu_466_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_463_p1));
    and_ln849_fu_420_p2 <= (xor_ln849_fu_415_p2 and icmp_ln849_1_reg_589);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        zext_ln662_fu_529_p1 when (isNeg_fu_472_p3(0) = '1') else 
        tmp_3_fu_533_p4;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln849_fu_411_p1 <= select_ln849_fu_404_p3;
    grp_fu_186_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_551),32));
    icmp_ln849_1_fu_324_p2 <= "1" when (unsigned(tmp_V_fu_308_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln849_fu_318_p2 <= "1" when (unsigned(tmp_V_fu_308_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    index_V_fu_330_p4 <= t_V_1_fu_305_p1(57 downto 52);
    isNeg_fu_472_p3 <= add_ln502_fu_466_p2(11 downto 11);
    mantissa_V_fu_450_p4 <= ((ap_const_lv1_1 & tmp_V_3_reg_610) & ap_const_lv1_0);
    mask_table1_address0 <= zext_ln498_fu_340_p1(6 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_table2_address0 <= zext_ln498_fu_340_p1(6 - 1 downto 0);

    one_half_table2_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            one_half_table2_ce0 <= ap_const_logic_1;
        else 
            one_half_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_11_fu_353_p3 <= (p_Result_s_fu_346_p3 & ap_const_lv63_0);
    p_Result_12_fu_396_p3 <= (tmp_1_fu_386_p4 & xs_sig_V_fu_380_p2);
    p_Result_s_fu_346_p3 <= t_V_1_reg_577(63 downto 63);
    p_Val2_8_fu_432_p1 <= select_ln849_1_fu_425_p3;
    p_Val2_s_fu_365_p2 <= std_logic_vector(unsigned(zext_ln209_fu_361_p1) + unsigned(t_V_1_reg_577));
    r_V_1_fu_515_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_459_p1),to_integer(unsigned('0' & zext_ln1287_fu_501_p1(31-1 downto 0)))));
    r_V_fu_509_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_450_p4),to_integer(unsigned('0' & zext_ln1285_fu_505_p1(31-1 downto 0)))));
    select_ln849_1_fu_425_p3 <= 
        x_assign_reg_571 when (and_ln849_fu_420_p2(0) = '1') else 
        bitcast_ln849_fu_411_p1;
    select_ln849_fu_404_p3 <= 
        p_Result_11_fu_353_p3 when (icmp_ln849_reg_583(0) = '1') else 
        p_Result_12_fu_396_p3;
        sext_ln1311_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_489_p3),32));

        sext_ln1311_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_480_p2),12));

    sub_ln1311_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_2_reg_604));
    sum_fu_295_p2 <= std_logic_vector(unsigned(zext_ln15_6_fu_291_p1) + unsigned(zext_ln15_2_fu_251_p1));
    t_V_1_fu_305_p1 <= x_assign_reg_571;
    tmp_1_fu_386_p4 <= p_Val2_s_fu_365_p2(63 downto 52);
    tmp_3_fu_533_p4 <= r_V_1_fu_515_p2(84 downto 53);
    tmp_5_fu_521_p3 <= r_V_fu_509_p2(53 downto 53);
    tmp_V_1_fu_370_p1 <= p_Val2_s_fu_365_p2(52 - 1 downto 0);
    tmp_V_3_fu_446_p1 <= p_Val2_8_fu_432_p1(52 - 1 downto 0);
    tmp_V_fu_308_p4 <= t_V_1_fu_305_p1(62 downto 52);
    ush_fu_489_p3 <= 
        sext_ln1311_fu_485_p1 when (isNeg_fu_472_p3(0) = '1') else 
        add_ln502_fu_466_p2;
    xor_ln1309_fu_374_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln849_fu_415_p2 <= (icmp_ln849_reg_583 xor ap_const_lv1_1);
    xs_sig_V_fu_380_p2 <= (xor_ln1309_fu_374_p2 and tmp_V_1_fu_370_p1);
    zext_ln10_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c5),9));
    zext_ln11_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c6),10));
    zext_ln1285_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_497_p1),54));
    zext_ln1287_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_497_p1),137));
    zext_ln12_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c7),9));
    zext_ln13_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c8),9));
    zext_ln15_1_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_1_fu_235_p2),10));
    zext_ln15_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_2_fu_245_p2),12));
    zext_ln15_3_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_fu_255_p2),11));
    zext_ln15_4_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_fu_265_p2),10));
    zext_ln15_5_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_5_fu_275_p2),11));
    zext_ln15_6_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_6_fu_285_p2),12));
    zext_ln15_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_225_p2),10));
    zext_ln209_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table2_q0),64));
    zext_ln498_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_330_p4),64));
    zext_ln502_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_604),12));
    zext_ln5_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c0),9));
    zext_ln662_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_521_p3),32));
    zext_ln682_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_450_p4),137));
    zext_ln6_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1),9));
    zext_ln7_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2),9));
    zext_ln8_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c3),9));
    zext_ln9_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c4),9));
end behav;
